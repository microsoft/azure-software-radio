# Pipeline to build new GNU Radio base docker images, including an image for pipeline CI runs
trigger: none

variables:
  - group: 'pipeline-unit-test-secrets'

parameters:
- name: modules
  type: object
  default:
  # Add a map to this list for each OOT module to test
  - module_dir: gr-azure-software-radio
    module_name: gr_azure_software_radio # must contain alphanumeric or '_' characters, no spaces
    include_paths: # no wildcards allowed
    - gr-azure-software-radio/
    exclude_paths: []  # no wildcards allowed
    apt_packages: []
    requirements_files:
    - python/requirements.txt
    test_env_var_mappings:
      AZURE_STORAGE_CONNECTION_STRING: $(rfsx-unit-test-pipeline-blob-connection-string)
      AZURE_STORAGE_URL: $(rfsx-unit-test-pipeline-blob-url)
      AZURE_STORAGE_SAS: $(rfsx-unit-test-pipeline-blob-sas-token)
      AZURE_SUBSCRIPTION_ID: $(pipeline-rbac-subscription-id)
      AZURE_TENANT_ID: $(pipeline-rbac-tenant)
      AZURE_CLIENT_ID: $(pipeline-rbac-app-id)
      AZURE_CLIENT_SECRET: $(pipeline-rbac-password)

resources:
  repositories:
    - repository: templates
      type: git
      name: ASCII-RFSX/az-rfsim-pipeline-utils
  containers:
  - container: test_base
    image: rfsxbuild.azurecr.io/gnuradiopipeline:3.9.2.0-2
    endpoint: rfsxbuild-svc-connection

pool:
  vmImage: 'Ubuntu-18.04'


jobs:
- job: CheckDiffs
  condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/dev'), ne(variables['Build.SourceBranch'], 'refs/heads/main'))
  variables:
    BuildModuleList: ''
  steps:  
  - template: templates/check_diffs_steps.yml@templates
    parameters:
      modules: ${{ parameters.modules }}

- ${{ each m in parameters.modules }}:
  - job: Test_${{ m.module_name }}
    container: test_base
    condition:
    steps:
    - template: templates/build_and_test_oot_module_steps.yml@templates
      parameters:
        module_dir: ${{ m.module_dir }}
        apt_packages: ${{ m.apt_packages }}
        requirements_files: ${{ m.requirements_files }}
        test_env_var_mappings: ${{ m.test_env_var_mappings }}
    - task: ComponentGovernanceComponentDetection@0
      inputs:
        sourceScanPath: ${{ m.module_dir }}
        
