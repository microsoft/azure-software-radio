# Copyright (c) Microsoft Corporation.
# Licensed under the GNU General Public License v3.0 or later.
# See License.txt in the project root for license information.
#

id: azure_software_radio_difi_sink_cpp
label: DIFI Sink
category: '[Azure software radio]'
templates:
  imports: import azure_software_radio
  make: azure_software_radio.difi_sink_cpp_${type.fcn}(${reference_time_full}, ${reference_time_frac}, ${ip_addr}, ${port}, bool(${mode}), 
                                                       ${data_size}, ${stream_id}, int(${reference_point}), ${sample_rate}, int(${packet_class}), ${oui}, 
                                                       ${context_packet_send_count}, int(${context_pack_size}), int(${bit_depth}), int(${scaling}), ${gain}, 
                                                       ${offset}, ${max_iq}, ${min_iq})

parameters:
- id: type
  label: IO Type
  dtype: enum
  options: [complex, complex8]
  option_attributes:
      fcn: [fc32, sc8]
- id: mode
  label: Mode
  dtype: enum
  options: ['True', 'False']
  option_labels: ['Paired', 'Standalone']
- id: bit_depth
  label: Bit Depth
  dtype: enum
  options: ['8', '16']
  default: '8'
- id: ip_addr
  label: Forwarding IP Address
  dtype: string
  default: "127.0.0.1"
- id: port
  label: Port Number
  dtype: int
  default: 0
- id: sample_rate
  label: Sample Rate
  dtype: int
  default: 100000
- id: reference_time_full
  label: Reference Time Full
  dtype: int
  default: 0
- id: reference_time_frac
  label: Reference Time Frac
  dtype: int
  default: 0
- id: data_size
  label: Samples Per Packet
  dtype: int
  default: 128
- id: stream_id
  label: Stream ID
  dtype: int
  default: 0
  hide: ${ ('all' if mode == 'True' else 'none') }
- id: reference_point
  label: Reference Point
  dtype: enum
  options: ['352', '101']
  option_labels: ['ADC', 'DAC']
  hide: ${ ('all' if mode == 'True' else 'none') }
- id: packet_class
  label: Packet Class
  dtype: enum
  options: ['0', '1', '2']
  hide: ${ ('all' if mode == 'True' else 'none') }
- id: oui
  label: Orginization Unique ID
  dtype: int
  default: 0
  hide: ${ ('all' if mode == 'True' else 'none') }
- id: context_packet_send_count
  label: Context packet interval
  dtype: int
  default: 1000
  hide: ${ ('all' if mode == 'True' else 'none') }
- id: context_pack_size
  label: The context packet size in bytes
  dtype: enum
  options: ['72', '108']
  default: '72'
  hide: ${ ('all' if mode == 'True' else 'none') }
- id: scaling
  category: Scaling
  label: Scaling Mode
  dtype: enum
  options: ['0', '1', '2']
  option_labels: ['None', 'Manual', 'Min-Max']
  default: 'Min-Max'
- id: gain
  category: Scaling
  label: Gain
  dtype: real
  default: 1.0
  hide: ${ ('none' if scaling == '1' else 'all') }
- id: offset
  category: Scaling
  label: Complex Offset
  dtype: complex
  default: 0
  hide: ${ ('none' if scaling == '1' else 'all') }
- id: max_iq
  category: Scaling
  label: Max IQ Value
  dtype: real
  default: 1.0
  hide: ${ ('none' if scaling == '2' else 'all') }
- id: min_iq
  category: Scaling
  label: Min IQ Value
  dtype: real
  default: -1.0
  hide: ${ ('none' if scaling == '2' else 'all') }
inputs:
- label: in
  domain: stream
  dtype: ${type.fcn}

asserts:
- ${ bit_depth == '8' if type.fcn == 'sc8' else True }

documentation: |-
     A DIFI sink block is based on IEEE-ISTO Std 4900-2021: Digital IF Interoperability Standard
     The block is not fully compliant just yet. Bit Depths supported are currently 8 and 16 with full support coming at a later date.
     Note, this block will causes quantization error if using with gr_complex since it will convert from float 32 I and Q to the bit_depth I and Q
     
     ===Params===
     
     reference_time_full:
     The initial refernce time full for the DIFI (VITA) data packets until a timing tag is recieved via pkt_n tag or a context packet tag. The time reference will never be updated if in standalone mode
     
     reference_time_frac:
     The initial refernce time frac for the DIFI (VITA) data packets until a timing tag is recieved via pkt_n tag or a context packet tag. The time reference will never be updated if in standalone mode
     
     ip_addr:
     The ip address for the socket that DIFI (VITA) packets will be forwared to
     
     port:
     The port number for the socket on the host that the DIFI (VITA) packets will be forwared to
     
     mode:
     Either standalone or paired. Paired mode is expected to have a DIFI (VITA) source block upstream in the flowgraph, standalone expects no such block, but context packet information must be given
     
     samples_per_packet:
     The number of samples for DIFI (VITA) data packet (header included) that this block with send out via the udp socket (Cannot exceed the MTU size in bytes)
     
     stream_number:
     The DIFI (VITA) stream number to expect for this stream.
     
     reference_point:
     The Reference point for the stream, either ADC or DAC (only used if the context packet size is 108)
     
     samp_rate:
     The sample rate
     
     packet_class:
     The packet class of either 0, 1, or 2 (See 2.2.2 Standard Flow Signal Context Packet of the DIFI spec for details).
     
     oui:
     The orginizational unique identfier. 
     
     context_interval:
     The number of data packets to send before sending the next context packet
     
     context_pack_size:
     The size of the context packet, either 72 or 108 (Which are supported by MS Spec)
     
     bit_depth:
     The bit depth
     
     scaling:
     The scaling mode
     
     gain:
     In manual scaling mode, gain applied to signal
     
     offset:
     In manual scaling mode, complex offset added to signal
     
     max_iq:
     In Min-Max scaling mode, expectd maximum value of I or Q ie. Max(Max(I),Max(Q))
     
     min_iq:
     In Min-Max scaling mode, expectd minimum value of I or Q ie. Min(Min(I),Min(Q))

file_format: 1
